using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Permissions;

namespace SurvivalGame
{
    /// <summary>
    /// This is the main type for your game.
    /// </summary>
    public class Game1 : Game
    {
        GraphicsDeviceManager graphics;
        SpriteBatch spriteBatch;
        KeyboardState kstate;
        MouseState mstate;
        Random rand = new Random();

        List<Keys> keyHistory = new List<Keys>();
        Dictionary<string, Texture2D> textures = new Dictionary<string, Texture2D>();

        Player player;
        //Enemy enemy;
        MouseCursor mouseCursor;

        List<Entity> entities = new List<Entity>();
        List<Bullet> bullets = new List<Bullet>();
        List<Enemy> enemies = new List<Enemy>();

        float rateOfFire = 0.2f;
        float timeSinceLastShot = 9999999f;
        float enemySpawnRate = 1f;
        float timeSinceEnemySpawn = 999999f;


        public Game1()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
        }

        /// <summary>
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// </summary>
        protected override void Initialize()
        {
            // TODO: Add your initialization logic here
            textures.Add("Player", CreateTexture(Color.Red));
            textures.Add("Enemy", CreateTexture(Color.Black));
            textures.Add("MouseCursor", CreateTexture(Color.White));
            textures.Add("Bullet", CreateTexture(Color.Orange));

            player = new Player(textures["Player"]);
            entities.Add(player);
            //for(int i = 0; i < 10; i++)
            //{
            //    enemies.Add(new Enemy(textures["Enemy"], rand.Next(0, 500), rand.Next(0, 500)));
            //}
            mouseCursor = new MouseCursor(textures["MouseCursor"]);
            //entities.Add(mouseCursor);

            base.Initialize();
        }

        /// <summary>
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// </summary>
        protected override void LoadContent()
        {
            // Create a new SpriteBatch, which can be used to draw textures.
            spriteBatch = new SpriteBatch(GraphicsDevice);

            // TODO: use this.Content to load your game content here
        }

        /// <summary>
        /// UnloadContent will be called once per game and is the place to unload
        /// game-specific content.
        /// </summary>
        protected override void UnloadContent()
        {
            // TODO: Unload any non ContentManager content here
        }

        /// <summary>
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Update(GameTime gameTime)
        {
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))
                Exit();
            kstate = Keyboard.GetState();
            mstate = Mouse.GetState();

            // TODO: Add your update logic here

            OnKeyDown(DetectKeyPressed(kstate), gameTime);
            OnKeyUp(DetectKeyReleased(kstate), gameTime);

            mouseCursor.Update(mstate);

            List<Entity> deadEntities = new List<Entity>();

            UpdateEntities(gameTime, deadEntities);

            KillDeadEntities(deadEntities);

            timeSinceEnemySpawn += (float)gameTime.ElapsedGameTime.TotalSeconds;
            SpawnEnemy();

            base.Update(gameTime);
        }

        /// <summary>
        /// This is called when the game should draw itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.ForestGreen);

            // TODO: Add your drawing code here
            spriteBatch.Begin();

            foreach (var bullet in bullets)
            {
                spriteBatch.Draw(bullet.Texture, bullet.Rect, null, Color.White, bullet.Rotation, new Vector2(0.5f, 0.5f), SpriteEffects.None, 0);
            }

            spriteBatch.Draw(player.Texture, player.Rect, Color.White);

            foreach(var enemy in enemies)
            {
                spriteBatch.Draw(enemy.Texture, enemy.Rect, Color.White);
            }

            spriteBatch.Draw(mouseCursor.Texture, mouseCursor.Rect, Color.White);

            spriteBatch.End();
            base.Draw(gameTime);
        }

        Texture2D CreateTexture(Color color)
        {
            Texture2D texture = new Texture2D(GraphicsDevice, 1, 1);
            Color[] data = new Color[1] { color };
            texture.SetData(data);
            return texture;

        }

        void OnKeyDown(List<Keys> keysPressed, GameTime gameTime)
        {
            if (keysPressed.Contains(Keys.D))
            {
                //player.X += player.speed * gameTime.ElapsedGameTime.TotalSeconds;
                //player.Update();
                //foreach (var enemy in enemies)
                //{
                //    if (player.Rect.Intersects(enemy.Rect))
                //    {
                //        player.X = enemy.Rect.Left - player.Rect.Width;
                //    }
                //}
                Move(1, gameTime, player, player.Speed);
                //var old = entity.X;
                //entity.X += entity.Speed * gameTime.ElapsedGameTime.TotalSeconds;
                //entity.Update();
                //List<double> coords = new List<double>();
                //List<double> values = new List<double>();
                //foreach (var enemy in ent)
                //{
                //    if (entity.Rect.Intersects(enemy.Rect))
                //    {
                //        coords.Add(enemy.Rect.Left - entity.Rect.Width);
                //    }
                //    else
                //        coords.Add(entity.X);
                //    if (old < entity.X)
                //    {
                //        values.Add(coords[coords.Count - 1] - old);
                //    }
                //    else
                //    {
                //        values.Add(old - coords[coords.Count - 1]);
                //    }
                //}
                //entity.X = coords[values.IndexOf(values.Min())];
            }
            if (keysPressed.Contains(Keys.A))
            {
                //var old = player.X;
                //player.X -= player.Speed * gameTime.ElapsedGameTime.TotalSeconds;
                //player.Update();
                //List<double> coords = new List<double>();
                //List<double> values = new List<double>();
                //foreach (var enemy in ent)
                //{
                //    if (player.Rect.Intersects(enemy.Rect))
                //    {
                //        coords.Add(enemy.Rect.Right);
                //    }
                //    else
                //        coords.Add(player.X);
                //    if(old < player.X)
                //    {
                //        values.Add(coords[coords.Count-1] - old);
                //    }
                //    else
                //    {
                //        values.Add(old - coords[coords.Count - 1]);
                //    }
                //}
                //player.X = coords[values.IndexOf(values.Min())];
                Move(2, gameTime, player, player.Speed);
            }
            if (keysPressed.Contains(Keys.S))
            {
                //player.Y += player.speed * gameTime.ElapsedGameTime.TotalSeconds;
                //player.Update();
                //foreach (var enemy in enemies)
                //{
                //    if (player.Rect.Intersects(enemy.Rect))
                //    {
                //        player.Y = enemy.Rect.Top - player.Rect.Height;
                //    }
                //}

                //var old = player.Y;
                //player.Y += player.Speed * gameTime.ElapsedGameTime.TotalSeconds;
                //player.Update();
                //List<double> coords = new List<double>();
                //List<double> values = new List<double>();
                //foreach (var enemy in ent)
                //{
                //    if (player.Rect.Intersects(enemy.Rect))
                //    {
                //        coords.Add(enemy.Rect.Top - player.Rect.Height);
                //    }
                //    else
                //        coords.Add(player.Y);
                //    if (old < player.Y)
                //    {
                //        values.Add(coords[coords.Count - 1] - old);
                //    }
                //    else
                //    {
                //        values.Add(old - coords[coords.Count - 1]);
                //    }
                //}
                //player.Y = coords[values.IndexOf(values.Min())];
                Move(3, gameTime, player, player.Speed);
            }
            if (keysPressed.Contains(Keys.W))
            {
                //player.Y -= player.speed * gameTime.ElapsedGameTime.TotalSeconds;
                //player.Update();
                //foreach (var enemy in enemies)
                //{
                //    if (player.Rect.Intersects(enemy.Rect))
                //    {
                //        player.Y = enemy.Rect.Bottom;
                //    }
                //}

                //var old = player.Y;
                //player.Y -= player.Speed * gameTime.ElapsedGameTime.TotalSeconds;
                //player.Update();
                //List<double> coords = new List<double>();
                //List<double> values = new List<double>();
                //foreach (var enemy in ent)
                //{
                //    if (player.Rect.Intersects(enemy.Rect))
                //    {
                //        coords.Add(player.Y = enemy.Rect.Bottom);
                //    }
                //    else
                //        coords.Add(player.Y);
                //    if (old < player.Y)
                //    {
                //        values.Add(coords[coords.Count - 1] - old);
                //    }
                //    else
                //    {
                //        values.Add(old - coords[coords.Count - 1]);
                //    }
                //}
                //player.Y = coords[values.IndexOf(values.Min())];
                Move(4, gameTime, player, player.Speed);
            }
            timeSinceLastShot += (float)gameTime.ElapsedGameTime.TotalSeconds;
            if (keysPressed.Contains(Keys.Space) && timeSinceLastShot > rateOfFire)
            {
                timeSinceLastShot = 0f;
                double yEdge = (player.Center.Y - mouseCursor.Center.Y);
                double xEdge = (player.Center.X - mouseCursor.Center.X);
                Bullet bullet = new Bullet(textures["Bullet"], player.Center.X, player.Center.Y, (float)Math.Atan2(yEdge, xEdge), new Vector2((float)xEdge, (float)yEdge));
                bullets.Add(bullet);
                entities.Add(bullet);
            }
        }
        void OnKeyUp(List<Keys> keysReleased, GameTime gameTime)
        {

        }
        
        List<Keys> DetectKeyPressed(KeyboardState kstate)
        {
            List<Keys> keysPressed = new List<Keys>();
            foreach (Keys key in kstate.GetPressedKeys())
            {
                if (!keyHistory.Contains(key))
                {
                    keysPressed.Add(key);
                }
            }
            return keysPressed;
        }
        List<Keys> DetectKeyReleased(KeyboardState kstate)
        {
            List<Keys> keysReleased = new List<Keys>();
            foreach (Keys key in keyHistory)
            {
                bool keyFound = false;
                foreach (Keys k in kstate.GetPressedKeys())
                {
                    if(key == k)
                    {
                        keyFound = true;
                    }
                }
                if (!keyFound)
                {
                    keysReleased.Add(key);
                }
            }
            return keysReleased;
        }

        void UpdateEntities(GameTime gameTime, List<Entity> deadEntities)
        {
            foreach (var ent in entities)
            {
                if (ent.GetType().Equals(typeof(Player)))
                {
                    player.Update();
                }
                else if (ent.GetType().Equals(typeof(Enemy)))
                {
                    foreach (var enemy in enemies)
                    {
                        if (enemy.Equals(ent))
                        {
                            enemy.Movement(enemy.X - player.X, enemy.Y - player.Y);
                            if(enemy.XMovement > 0)
                            {
                                Move(1, gameTime, enemy, enemy.XMovement);
                            }
                            else Move(2, gameTime, enemy, -enemy.XMovement);
                            if (enemy.YMovement > 0)
                            {
                                Move(3, gameTime, enemy, enemy.YMovement);
                            }
                            else Move(4, gameTime, enemy, -enemy.YMovement);
                            //enemy.Move(gameTime);
                            //enemy.Y = enemy.old[1];
                            //enemy.Update();
                            //foreach (Entity entity in entities)
                            //{
                            //    if (enemy != entity && entity.Collision && enemy.Rect.Intersects(entity.Rect))
                            //    {
                            //        enemy.X = enemy.old[0];
                            //        //enemy.Y = enemy.old[1];
                            //        break;
                            //    }
                            //}
                            //enemy.Update();
                            //enemy.Move(gameTime);
                            //enemy.X = enemy.old[0];
                            //enemy.Update();
                            //foreach (Entity entity in entities)
                            //{
                            //    if (enemy != entity && entity.Collision && enemy.Rect.Intersects(entity.Rect))
                            //    {
                            //        //enemy.X = enemy.old[0];
                            //        enemy.Y = enemy.old[1];
                            //        break;
                            //    }
                            //}
                            //enemy.Update();

                            //List<List<double>> coords = new List<List<double>>();
                            //List<double> values = new List<double>();
                            //foreach (Entity entity in entities)
                            //{
                            //    if (enemy != entity && entity.Collision /*&& enemy.Rect.Intersects(entity.Rect)*/)
                            //    {
                            //        Console.WriteLine(entity.GetType());
                            //        coords.Add(enemy.CheckCollision(entity.Rect, gameTime));
                            //        
                            //        if (enemy.X < coords[coords.Count - 1][0])
                            //        {
                            //            var i = coords[coords.Count - 1][0] - enemy.X;
                            //            if (enemy.Y < coords[coords.Count - 1][1])
                            //            {
                            //                values.Add(coords[coords.Count - 1][1] - enemy.Y + i);
                            //            }
                            //            else
                            //            {
                            //                values.Add(enemy.Y - coords[coords.Count - 1][1] + i);
                            //            }
                            //        }
                            //        else
                            //        {
                            //            var i = enemy.X - coords[coords.Count - 1][0];
                            //            if (enemy.Y < coords[coords.Count - 1][1])
                            //            {
                            //                values.Add(coords[coords.Count - 1][1] - enemy.Y + i);
                            //            }
                            //            else
                            //            {
                            //                values.Add(enemy.Y - coords[coords.Count - 1][1] + i);
                            //            }
                            //        }
                            //    }
                            //    //coords.Add(enemy.CheckCollision(entity.Rect, gameTime));
                            //    //else coords.Add(enemy.CheckCollision(entity.Rect, gameTime, true));

                            //}
                            //enemy.X = coords[values.IndexOf(values.Min())][0];
                            //enemy.Y = coords[values.IndexOf(values.Min())][1];
                            //enemy.Update();
                            if (enemy.Health <= 0)
                            {
                                deadEntities.Add(enemy);
                            }
                            enemy.Update();
                        }
                    }
                }
                else if (ent.GetType().Equals(typeof(Bullet)))
                {
                    foreach (var bullet in bullets)
                    {
                        if (bullet.Equals(ent))
                        {
                            bullet.Move(gameTime);
                            bullet.Update(gameTime, deadEntities);
                            foreach (var enemy in enemies)
                            {
                                if (bullet.DetectEnemy(enemy))
                                {
                                    enemy.Health--;
                                    deadEntities.Add(bullet);
                                }
                            }
                        }
                    }
                }
            }
        }

        void KillDeadEntities(List<Entity> deadEntities)
        {
            foreach (var entity in deadEntities)
            {
                entities.Remove(entity);
                if (entity.GetType().Equals(typeof(Bullet)))
                {
                    Bullet bullet = null;
                    foreach (var b in bullets)
                    {
                        if (b.Equals(entity))
                        {
                            bullet = b;
                        }
                    }
                    bullets.Remove(bullet);
                }
                if (entity.GetType().Equals(typeof(Enemy)))
                {
                    Enemy enemy = null;
                    foreach (var e in enemies)
                    {
                        if (e.Equals(entity))
                        {
                            enemy = e;
                        }
                    }
                    enemies.Remove(enemy);
                }
            }
        }

        void SpawnEnemy()
        {
            if (timeSinceEnemySpawn > enemySpawnRate)
            {
                int i = 0;
                while (i < 10)
                {
                    bool suitableSpot = true;
                    var enemy = new Enemy(textures["Enemy"], rand.Next(0, 500), rand.Next(0, 500), player);
                    enemy.Update();
                    foreach (var entity in entities)
                    {
                        if (enemy != entity && enemy.Rect.Intersects(entity.Rect))
                        {
                            suitableSpot = false;
                            break;
                        }
                    }
                    if (suitableSpot)
                    {
                        enemies.Add(enemy);
                        entities.Add(enemy);
                        timeSinceEnemySpawn = 0f;
                        break;
                    }
                    i++;
                }
            }
        }
        void Move(int directon, GameTime gameTime, Entity entity, double speed)
        {
            double old;
            List<double> coords = new List<double>();
            List<double> values = new List<double>();
            switch (directon)
            {
                case 1:
                    old =  entity.X;
                    entity.X += speed * gameTime.ElapsedGameTime.TotalSeconds;
                    entity.Update();
                    foreach (var e in entities)
                    {
                        if(e != entity && e.Collision)
                        {
                            if (entity.Rect.Intersects(e.Rect))
                            {
                                coords.Add(e.Rect.Left - entity.Rect.Width);
                            }
                            else
                                coords.Add(entity.X);
                            if (old < entity.X)
                            {
                                values.Add(coords[coords.Count - 1] - old);
                            }
                            else
                            {
                                values.Add(old - coords[coords.Count - 1]);
                            }
                        }
                        
                    }
                    entity.X = coords[values.IndexOf(values.Min())];
                    break;
                case 2:
                    old = entity.X;
                    entity.X -= speed * gameTime.ElapsedGameTime.TotalSeconds;
                    entity.Update();
                    
                    foreach (var e in entities)
                    {
                        if (e != entity && e.Collision)
                        {
                            if (entity.Rect.Intersects(e.Rect))
                            {
                                coords.Add(e.Rect.Right);
                            }
                            else
                                coords.Add(entity.X);
                            if (old < entity.X)
                            {
                                values.Add(coords[coords.Count - 1] - old);
                            }
                            else
                            {
                                values.Add(old - coords[coords.Count - 1]);
                            }
                        }
                    }
                    entity.X = coords[values.IndexOf(values.Min())];
                    break;
                case 3:
                    old = entity.Y;
                    entity.Y += speed * gameTime.ElapsedGameTime.TotalSeconds;
                    entity.Update();
                    foreach (var e in entities)
                    {
                        if (e != entity && e.Collision)
                        {
                            if (entity.Rect.Intersects(e.Rect))
                            {
                                coords.Add(e.Rect.Top - entity.Rect.Height);
                            }
                            else
                                coords.Add(entity.Y);
                            if (old < entity.Y)
                            {
                                values.Add(coords[coords.Count - 1] - old);
                            }
                            else
                            {
                                values.Add(old - coords[coords.Count - 1]);
                            }
                        }
                    }
                    entity.Y = coords[values.IndexOf(values.Min())];
                    break;
                case 4:
                    old = entity.Y;
                    entity.Y -= speed * gameTime.ElapsedGameTime.TotalSeconds;
                    entity.Update();
                    foreach (var e in entities)
                    {
                        if (e != entity && e.Collision)
                        {
                            if (entity.Rect.Intersects(e.Rect))
                            {
                                coords.Add(entity.Y = e.Rect.Bottom);
                            }
                            else
                                coords.Add(entity.Y);
                            if (old < entity.Y)
                            {
                                values.Add(coords[coords.Count - 1] - old);
                            }
                            else
                            {
                                values.Add(old - coords[coords.Count - 1]);
                            }
                        }
                    }
                    entity.Y = coords[values.IndexOf(values.Min())];
                    break;
            }
        }
    }
}
