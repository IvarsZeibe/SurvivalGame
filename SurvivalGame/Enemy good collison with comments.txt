using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Remoting.Metadata.W3cXsd2001;
using System.Text;
using System.Threading.Tasks;

namespace SurvivalGame
{
    class Enemy : Entity
    {
        public Player player;
        public List<double> old;
        public int Health { get; set; }
        public Enemy(Texture2D texture, double x, double y, Player player_)
        {
            Collision = true;
            player = player_;
            Speed = 100;
            Health = 3;
            X = x;
            Y = y;
            Size = new Point(20, 30);
            Texture = texture;
        }
        public void Update()
        {
            Center = new Vector2((float)X + Size.X / 2, (float)Y + Size.Y / 2);
            Rect = new Rectangle((int)X, (int)Y, Size.X, Size.Y);
        }
        public void Movement(double xedge, double yedge)
        {
            XMovement = -xedge / ((Math.Abs(xedge) + Math.Abs(yedge)) * Speed);
            YMovement = -yedge / ((Math.Abs(xedge) + Math.Abs(yedge)) * Speed);
        }
        public int MovementX(double xedge, double yedge)
        {
            XMovement = -xedge / ((Math.Abs(xedge) + Math.Abs(yedge)) * Speed);
            if (XMovement > 0)
            {
                return 1;
            }
            else return 2;
        }
        public int MovementY(double xedge, double yedge)
        {
            
            YMovement = -yedge / ((Math.Abs(xedge) + Math.Abs(yedge)) * Speed);
            if (YMovement > 0)
            {
                return 1;
            }
            else return 2;
        }
        public void Move(GameTime gameTime)
        {
            old = new List<double>() { X, Y };
            Movement(X - player.X, Y - player.Y);
            X += XMovement * gameTime.ElapsedGameTime.TotalSeconds;
            Y += YMovement * gameTime.ElapsedGameTime.TotalSeconds;
        }
        //public List<double> CheckCollision(Rectangle rect, GameTime gameTime, bool noRect = false)
        //{
        //    Movement(X - player.X, Y - player.Y);
        //    List<double> xy = new List<double>();
        //    if (noRect)
        //    {
        //        xy.Add(X + XMovement * gameTime.ElapsedGameTime.TotalSeconds);
        //        xy.Add(Y + YMovement * gameTime.ElapsedGameTime.TotalSeconds);
        //        return xy;
        //    }
        //    old = new List<double>() { X, Y };
        //    X += XMovement * gameTime.ElapsedGameTime.TotalSeconds;
        //    Update();
        //    if (Rect.Intersects(rect))
        //    {
        //        if (XMovement > 0)
        //        {
        //            xy.Add(rect.X - Rect.Width);
        //            //X = rect.Left - Rect.Width;
        //        }
        //        else
        //            xy.Add(rect.X + rect.Width);
        //        //X = rect.Right;
        //        //X = oldX;
        //    }
        //    else
        //        xy.Add(X); X = old[0];
        //    Update();

        //    Y += YMovement * gameTime.ElapsedGameTime.TotalSeconds;
        //    Update();
        //    if (Rect.Intersects(rect))
        //    {
        //        if (YMovement > 0)
        //            xy.Add(rect.Y - Rect.Height);
        //        //Y = rect.Top - Rect.Height;
        //        else
        //            //Y = rect.Bottom;
        //            xy.Add(rect.Y + rect.Height);
        //        //Y = oldY;
        //    }
        //    else
        //        xy.Add(Y); Y = old[1];

        //    Update();
        //    return xy;
        //}
    }
}
